<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itwillbs.c4d2412t3p1.mapper.AttendanceMapper">
    
    <select id="select_ATTENDANCE" resultType="map">
	   SELECT 
	        a.*, 
	        e.EMPLOYEE_NM, 
	        c.COMMON_NM, 
	        e.EMPLOYEE_HD,
	        a.EMPLOYEE_CD,
	        CASE 
	            WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')) / 12) &lt; 1 
	            THEN TO_CHAR(TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')))) || '개월'
	            ELSE TO_CHAR(FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')) / 12)) || '년'
	        END AS SERVICE_YEARS,
	        c.COMMON_NM AS DEPARTMENT_NAME,
	        CASE 
	            WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')) / 12) &lt; 1 
	                THEN TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd'))) + NVL(a.ANNUAL_RA, 0)
	            WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')) / 12) &lt; 3 
	                THEN 15 + NVL(a.ANNUAL_RA, 0)
	            ELSE 
	                LEAST(15 + FLOOR((FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')) / 12) - 3) / 2), 25) + NVL(a.ANNUAL_RA, 0)
	        END AS EXPECT_ANNUAL,
	        a.ANNUAL_AA,
	        CASE 
	            WHEN a.ANNUAL_UA &lt; 1 AND a.ANNUAL_UA &gt; 0 THEN '0' || TO_CHAR(a.ANNUAL_UA) 
	            ELSE TO_CHAR(a.ANNUAL_UA) 
	        END AS ANNUAL_UA,
	        CASE 
	            WHEN a.ANNUAL_RA &lt; 1 AND a.ANNUAL_RA &gt; 0 THEN '0' || TO_CHAR(a.ANNUAL_RA) 
	            ELSE TO_CHAR(a.ANNUAL_RA) 
	        END AS ANNUAL_RA
	    FROM ANNUAL a
	    LEFT JOIN EMPLOYEE e 
	        ON a.EMPLOYEE_CD = e.EMPLOYEE_CD
	    LEFT JOIN COMMON_CODE c
	        ON e.EMPLOYEE_DP = c.COMMON_CC
	    WHERE 1=1
	        AND c.COMMON_GC = 'DEPARTMENT'
	        AND EMPLOYEE_US = '1'
	    ORDER BY a.ANNUAL_YR DESC, a.EMPLOYEE_CD DESC
	</select>
    
    <select id="select_EMPLOYEE_ANNUAL" resultType="map">
        SELECT e.*, c.*
          FROM EMPLOYEE e
	 LEFT JOIN COMMON_CODE c ON e.EMPLOYEE_DP = c.COMMON_CC AND c.COMMON_GC = 'DEPARTMENT'
         WHERE 1=1
			   AND e.EMPLOYEE_NM LIKE '%' || #{employee_nm} || '%'
	  ORDER BY e.EMPLOYEE_CD DESC
    </select>
    
    <select id="select_filer_ANNUAL" resultType="map">
	    SELECT 
	        a.*,
	        e.EMPLOYEE_NM,
	        e.EMPLOYEE_HD,
	        c.COMMON_NM,
	        CASE 
		        WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')) / 12) &lt; 1 
		        THEN TO_CHAR(TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')))) || '개월'
		        ELSE TO_CHAR(FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(e.EMPLOYEE_HD, 'yyyy-MM-dd')) / 12)) || '년'
		    END AS service_years
	    FROM ANNUAL a
		LEFT JOIN EMPLOYEE e 
	        ON a.EMPLOYEE_CD = e.EMPLOYEE_CD
        LEFT JOIN COMMON_CODE c
       	    ON e.EMPLOYEE_DP = c.COMMON_CC
	    <where> 1=1
	    		AND c.COMMON_GC = 'DEPARTMENT'
	        <if test="employee_cd != null and employee_cd != ''">
	            AND a.EMPLOYEE_CD = #{employee_cd}
	        </if>
	        <if test="employee_nm != null and employee_nm != ''">
	            AND e.EMPLOYEE_NM = #{employee_nm}
	        </if>
	        <if test="employee_dp != null and employee_dp != ''">
	            AND e.EMPLOYEE_DP = #{employee_dp}
	        </if>
	        <if test="employee_hd1 != null and employee_hd1 != '' and employee_hd2 != null and employee_hd2 != ''">
	            AND #{employee_hd1} &lt;= e.EMPLOYEE_HD AND e.EMPLOYEE_HD &lt;= #{employee_hd2}
	        </if>
	        <if test="annual_ra != null and annual_ra != ''">
	            AND a.ANNUAL_RA = #{annual_ra}
	        </if>
	    </where>
	   ORDER BY a.ANNUAL_YR DESC, a.EMPLOYEE_CD DESC
	</select>
	
    <insert id="insert_ANNUAL" parameterType="map">
		INSERT INTO ANNUAL (EMPLOYEE_CD
						    , ANNUAL_YR
						    , ANNUAL_UA
						    , ANNUAL_RA
						    , ANNUAL_AA
						    , ANNUAL_RU
						    , ANNUAL_RD
						    , ANNUAL_UU
						    , ANNUAL_UD
							)
					VALUES (#{EMPLOYEE_CD}
				        	, #{ANNUAL_YR}
							, 0 
							, #{EXPECT_ANNUAL} 
							, #{EXPECT_ANNUAL} 
							, #{ANNUAL_RU} 
							, #{ANNUAL_RD} 
							, NULL
							, NULL)
	</insert>
	
	<select id="select_APPROVAL_ANNUAL" resultType="map">
		WITH ANNUAL_USAGE AS (
		    SELECT 
		        e.EMPLOYEE_CD,
		        e.EMPLOYEE_NM,
		        c.COMMON_NM AS EMPLOYEE_DP,
		        cc.COMMON_NM AS EMPLOYEE_GD,
		        EXTRACT(YEAR FROM TO_DATE(JSON_VALUE(a.APPROVAL_CT, '$.startday'), 'YYYY-MM-DD')) AS USAGE_YEAR,
		        CASE 
				    WHEN JSON_VALUE(a.APPROVAL_CT, '$.annualtype') = 'AN' THEN 1 -- 연차
				    WHEN JSON_VALUE(a.APPROVAL_CT, '$.annualtype') LIKE '%BN%' THEN 0.5 -- 반차
				    WHEN JSON_VALUE(a.APPROVAL_CT, '$.annualtype') = 'SN' THEN 0 -- 병가는 연차 소진 없음
				    ELSE 0
				END AS MAPPED_VALUE
		    FROM APPROVAL a
		    LEFT JOIN EMPLOYEE e ON e.EMPLOYEE_ID = a.APPROVAL_WR 
		    LEFT JOIN COMMON_CODE c ON c.COMMON_GC = 'DEPARTMENT' AND c.COMMON_CC = e.EMPLOYEE_DP
		    LEFT JOIN COMMON_CODE cc ON cc.COMMON_GC = 'POSITION' AND cc.COMMON_CC = e.EMPLOYEE_GD
		    WHERE 1=1
		      AND a.APPROVAL_DV = '10'
		      AND JSON_VALUE(a.APPROVAL_CT, '$.startday') IS NOT NULL
		)
		-- 연차 사용량을 계산
		, ANNUAL_SUMMARY AS (
		    SELECT 
		        EMPLOYEE_CD,
		        EMPLOYEE_NM,
		        EMPLOYEE_DP,
		        EMPLOYEE_GD,
		        USAGE_YEAR,
		        SUM(MAPPED_VALUE) AS ANNUAL_UA -- 사용연차 (Annual Used Amount)
		    FROM ANNUAL_USAGE
		    GROUP BY EMPLOYEE_CD, EMPLOYEE_NM, EMPLOYEE_DP, EMPLOYEE_GD, USAGE_YEAR
		)
		-- 최종 출력
	   SELECT 
		    s.EMPLOYEE_CD,
		    s.EMPLOYEE_NM,
		    s.EMPLOYEE_DP,
		    s.EMPLOYEE_GD,
		    s.USAGE_YEAR,
		    a.ANNUAL_UA, -- 사용연차
		    a.ANNUAL_AA AS TOTAL_ANNUAL, -- 총연차
		    a.ANNUAL_RA AS REMAINING_ANNUAL -- 잔여연차
		 FROM ANNUAL_SUMMARY s
	LEFT JOIN ANNUAL a ON s.EMPLOYEE_CD = a.EMPLOYEE_CD AND A.ANNUAL_YR = '2025'
		WHERE 1=1
			<if test="!isAdmin or type == 1">
			  AND s.EMPLOYEE_CD = #{employee_cd}
			  AND a.ANNUAL_YR = #{ANNUAL_YR}
			</if>
		ORDER BY s.EMPLOYEE_CD, s.USAGE_YEAR
	</select>
	
    <select id="select_calendar_ANNUAL" resultType="map">
		WITH NUMBERS AS (
			SELECT ROWNUM AS N
			  FROM (SELECT 1 FROM DUAL CONNECT BY ROWNUM &lt;= 365) -- 최대 1년 (365일) 생성
		),
		DATE_EXPAND AS (
		    SELECT 
				   a.APPROVAL_CD,
				   TO_DATE(JSON_VALUE(a.APPROVAL_CT, '$.startday'), 'YYYY-MM-DD') AS STARTDAY,
				   TO_DATE(JSON_VALUE(a.APPROVAL_CT, '$.endday'), 'YYYY-MM-DD') AS ENDDAY,
				   JSON_VALUE(a.APPROVAL_CT, '$.reason') AS REASONS,
				   EM.EMPLOYEE_NM,
				   EM.EMPLOYEE_CD,
				   C.COMMON_NM AS EMPLOYEE_DP,
				   CC.COMMON_NM AS EMPLOYEE_GD,
				   CCC.COMMON_NM AS ANNUALTYPE,
				   CCCC.COMMON_NM AS APPROVAL_DV
		      FROM APPROVAL a
		 LEFT JOIN EMPLOYEE EM ON EM.EMPLOYEE_ID = a.APPROVAL_WR 
		 LEFT JOIN COMMON_CODE C ON C.COMMON_GC = 'DEPARTMENT' AND C.COMMON_CC = EM.EMPLOYEE_DP
		 LEFT JOIN COMMON_CODE CC ON CC.COMMON_GC = 'POSITION' AND CC.COMMON_CC = EM.EMPLOYEE_GD
		 LEFT JOIN COMMON_CODE CCC ON CCC.COMMON_GC = 'ANNUAL' AND CCC.COMMON_CC = JSON_VALUE(a.APPROVAL_CT, '$.annualtype')
		 LEFT JOIN COMMON_CODE CCCC ON CCCC.COMMON_GC = 'DRAFT' AND CCCC.COMMON_NM = '휴가신청서'
		),
		DATES AS (
			SELECT 
				   E.APPROVAL_CD,
				   E.STARTDAY + N - 1 AS GENERATED_DATE, -- 날짜별로 확장
				   E.REASONS,
				   E.EMPLOYEE_NM,
				   E.EMPLOYEE_CD,
				   E.EMPLOYEE_DP,
				   E.EMPLOYEE_GD,
				   E.ANNUALTYPE,
				   E.APPROVAL_DV
			  FROM DATE_EXPAND E
			  JOIN NUMBERS N ON N.N &lt;= (E.ENDDAY - E.STARTDAY + 1) -- 날짜 확장 조건
		)
		SELECT 
			   APPROVAL_CD,
			   TO_CHAR(GENERATED_DATE, 'YYYY-MM-DD') AS GENERATED_DATE,
			   REASONS,
			   EMPLOYEE_NM,
			   EMPLOYEE_CD,
			   EMPLOYEE_DP,
			   EMPLOYEE_GD,
			   ANNUALTYPE,
			   APPROVAL_DV
		  FROM DATES
		 WHERE 1=1
			<if test="!isAdmin or type == 1">
			   AND EMPLOYEE_CD = #{employee_cd}
			</if>
			<if test="date != null and date != ''">
			   AND GENERATED_DATE = #{date}
			</if>
	  ORDER BY GENERATED_DATE, EMPLOYEE_NM
	</select>
</mapper>